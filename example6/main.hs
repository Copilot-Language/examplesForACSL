import Copilot.Language.Reify
import Copilot.Language
import Copilot.Library.Clocks

import qualified Copilot.Compile.SBV as S
import qualified Copilot.Compile.C99 as C
import qualified Prelude as P
import Debug.Trace
import Control.Monad (foldM_)

--------------------------------------------------------------------------------


import qualified Data.List as L

import qualified Data.SBV as V
import Data.SBV.Examples.CodeGeneration.CRC_USB5 (crcUSB)

-- | Incoming stream of words_1: 1,2,3, ..., 2047,0,1,2, ...
words_1 :: Stream Word16
words_1 = [1] ++ words_1 `mod` 2047 -- USB5 is for 11-bit words_1.

-- | Call the CRC function generated by the SBV package.  (The Nothing argument
-- says "no interpreter values given.)
current :: Stream Word16
current = externFun "crc_sbv" [arg words_1] Nothing

-- | xor the CRC of the current word and the CRC of the stream so far.
output :: Stream Word16
output = [0] ++ current .^. output

-- | The trigger specifies a C function with the prototype 
-- void chksum(Word16, Word16, Word16);
spec :: Spec
spec = 
  trigger "chksum" true [ arg words_1
                        , arg current
                        , arg output
                        ]

main = do
   reify spec >>=
    S.compileWithSBV 
      S.defaultParams []
    
  where
  sbv = do word <- V.cgInput "word"
           V.cgReturn (crcUSB word)



--------------------------------------------------------------------------------
