(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (1/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part1
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (1/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 <> (if (0.0 <=. r_3) then 1 else 0)) ->
  (0 <> (if (r_4 <=. 30.0e0) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 <> (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((r_5 <=. 144.78e0) \/ ((0.0 <=. r_3) /\ (r_4 <=. 30.0e0)))

end

(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (2/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part2
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (2/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 <> (if (0.0 <=. r_3) then 1 else 0)) ->
  (0 <> (if (r_4 <=. 30.0e0) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 = (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((r_5 <=. 144.78e0) \/ ((0.0 <=. r_3) /\ (r_4 <=. 30.0e0)))

end

(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (4/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part4
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (4/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 = (if (r_4 <=. 30.0e0) then 1 else 0)) ->
  (0 <> (if (0.0 <=. r_3) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 <> (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((r_5 <=. 144.78e0) \/ ((0.0 <=. r_3) /\ (r_4 <=. 30.0e0)))

end

(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (6/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part6
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (6/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 = (if (r_4 <=. 30.0e0) then 1 else 0)) ->
  (0 <> (if (0.0 <=. r_3) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 = (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((144.78e0 <. r_5) /\ ((30.0e0 <. r_4) \/ (r_3 <. 0.0)))

end

(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (7/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part7
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (7/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 = (if (0.0 <=. r_3) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 <> (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((r_5 <=. 144.78e0) \/ ((0.0 <=. r_3) /\ (r_4 <=. 30.0e0)))

end

(* ---------------------------------------------------------- *)
(* --- Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (9/9) --- *)
(* ---------------------------------------------------------- *)
theory VCext_ident_bool_762_arg0_post_part9
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Qed.Qed
use import int.Abs as IAbs
use import Cmath.Cmath
use import Cfloat.Cfloat
use import real.Abs as RAbs

goal WP "expl:Post-condition (file ext_ident_bool_762_arg0.c, line 52) in 'ext_ident_bool_762_arg0' (9/9)":
  forall r_4 r_3 r_2 r_1 r : real.
  let r_5 = r_1 *. r_2 in
  ((is_float64 r_1)) ->
  ((is_float64 r_2)) ->
  ((is_float64 r_3)) ->
  ((is_float64 r_4)) ->
  (0 = (if (0.0 <=. r_3) then 1 else 0)) ->
  ((is_float64 (r +. r_1))) ->
  ((is_float64 r_5)) ->
  (0 = (if (r_5 <=. 144.78e0) then 1 else 0)) ->
  ((144.78e0 <. r_5) /\ ((30.0e0 <. r_4) \/ (r_3 <. 0.0)))

end

